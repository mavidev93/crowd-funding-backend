/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CrowdFund {
  export type CampaignStruct = {
    campaignOwner: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
    campaignUrl: PromiseOrValue<string>;
    campaignHash: PromiseOrValue<string>;
    goalAmount: PromiseOrValue<BigNumberish>;
    totalAmountFunded: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    goalAchieved: PromiseOrValue<boolean>;
    isCampaignOpen: PromiseOrValue<boolean>;
    isExists: PromiseOrValue<boolean>;
  };

  export type CampaignStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean
  ] & {
    campaignOwner: string;
    id: BigNumber;
    campaignUrl: string;
    campaignHash: string;
    goalAmount: BigNumber;
    totalAmountFunded: BigNumber;
    deadline: BigNumber;
    goalAchieved: boolean;
    isCampaignOpen: boolean;
    isExists: boolean;
  };
}

export interface CrowdFundInterface extends utils.Interface {
  functions: {
    "claimRefund(string)": FunctionFragment;
    "closeCampaign(string)": FunctionFragment;
    "createCampaign(string,uint256,uint256)": FunctionFragment;
    "fundCampaign(string)": FunctionFragment;
    "getAllCampaigns()": FunctionFragment;
    "getCampaignByHash(string)": FunctionFragment;
    "getCampaignCount()": FunctionFragment;
    "getContributions(string)": FunctionFragment;
    "getHashById(uint256)": FunctionFragment;
    "hashToCampaign(string)": FunctionFragment;
    "idToHash(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "test()": FunctionFragment;
    "withdrawFunds(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRefund"
      | "closeCampaign"
      | "createCampaign"
      | "fundCampaign"
      | "getAllCampaigns"
      | "getCampaignByHash"
      | "getCampaignCount"
      | "getContributions"
      | "getHashById"
      | "hashToCampaign"
      | "idToHash"
      | "owner"
      | "test"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCampaign",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundCampaign",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignByHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContributions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHashById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToCampaign",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "idToHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "test", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHashById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashToCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idToHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "Fund(address,address,uint256)": EventFragment;
    "Test(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Fund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Test"): EventFragment;
}

export interface FundEventObject {
  from: string;
  campaignOwner: string;
  id: BigNumber;
}
export type FundEvent = TypedEvent<
  [string, string, BigNumber],
  FundEventObject
>;

export type FundEventFilter = TypedEventFilter<FundEvent>;

export interface TestEventObject {
  from: string;
  testId: BigNumber;
}
export type TestEvent = TypedEvent<[string, BigNumber], TestEventObject>;

export type TestEventFilter = TypedEventFilter<TestEvent>;

export interface CrowdFund extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdFundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRefund(
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeCampaign(
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCampaign(
      hash: PromiseOrValue<string>,
      _goalAmount: PromiseOrValue<BigNumberish>,
      _fundingPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundCampaign(
      _hash: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllCampaigns(
      overrides?: CallOverrides
    ): Promise<[CrowdFund.CampaignStructOutput[]]>;

    getCampaignByHash(
      _hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[CrowdFund.CampaignStructOutput]>;

    getCampaignCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContributions(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { contribution: BigNumber }>;

    getHashById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashToCampaign(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        campaignOwner: string;
        id: BigNumber;
        campaignUrl: string;
        campaignHash: string;
        goalAmount: BigNumber;
        totalAmountFunded: BigNumber;
        deadline: BigNumber;
        goalAchieved: boolean;
        isCampaignOpen: boolean;
        isExists: boolean;
      }
    >;

    idToHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    test(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimRefund(
    hash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeCampaign(
    hash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCampaign(
    hash: PromiseOrValue<string>,
    _goalAmount: PromiseOrValue<BigNumberish>,
    _fundingPeriodInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundCampaign(
    _hash: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllCampaigns(
    overrides?: CallOverrides
  ): Promise<CrowdFund.CampaignStructOutput[]>;

  getCampaignByHash(
    _hash: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<CrowdFund.CampaignStructOutput>;

  getCampaignCount(overrides?: CallOverrides): Promise<BigNumber>;

  getContributions(
    hash: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHashById(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  hashToCampaign(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean
    ] & {
      campaignOwner: string;
      id: BigNumber;
      campaignUrl: string;
      campaignHash: string;
      goalAmount: BigNumber;
      totalAmountFunded: BigNumber;
      deadline: BigNumber;
      goalAchieved: boolean;
      isCampaignOpen: boolean;
      isExists: boolean;
    }
  >;

  idToHash(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  test(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    hash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRefund(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeCampaign(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createCampaign(
      hash: PromiseOrValue<string>,
      _goalAmount: PromiseOrValue<BigNumberish>,
      _fundingPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundCampaign(
      _hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllCampaigns(
      overrides?: CallOverrides
    ): Promise<CrowdFund.CampaignStructOutput[]>;

    getCampaignByHash(
      _hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<CrowdFund.CampaignStructOutput>;

    getCampaignCount(overrides?: CallOverrides): Promise<BigNumber>;

    getContributions(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHashById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    hashToCampaign(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        campaignOwner: string;
        id: BigNumber;
        campaignUrl: string;
        campaignHash: string;
        goalAmount: BigNumber;
        totalAmountFunded: BigNumber;
        deadline: BigNumber;
        goalAchieved: boolean;
        isCampaignOpen: boolean;
        isExists: boolean;
      }
    >;

    idToHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    test(overrides?: CallOverrides): Promise<void>;

    withdrawFunds(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Fund(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      campaignOwner?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): FundEventFilter;
    Fund(
      from?: PromiseOrValue<string> | null,
      campaignOwner?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): FundEventFilter;

    "Test(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      testId?: PromiseOrValue<BigNumberish> | null
    ): TestEventFilter;
    Test(
      from?: PromiseOrValue<string> | null,
      testId?: PromiseOrValue<BigNumberish> | null
    ): TestEventFilter;
  };

  estimateGas: {
    claimRefund(
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeCampaign(
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCampaign(
      hash: PromiseOrValue<string>,
      _goalAmount: PromiseOrValue<BigNumberish>,
      _fundingPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundCampaign(
      _hash: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    getCampaignByHash(
      _hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCampaignCount(overrides?: CallOverrides): Promise<BigNumber>;

    getContributions(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHashById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashToCampaign(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idToHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    test(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRefund(
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeCampaign(
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCampaign(
      hash: PromiseOrValue<string>,
      _goalAmount: PromiseOrValue<BigNumberish>,
      _fundingPeriodInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundCampaign(
      _hash: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllCampaigns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCampaignByHash(
      _hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContributions(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHashById(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashToCampaign(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idToHash(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

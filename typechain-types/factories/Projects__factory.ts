/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Projects, ProjectsInterface } from "../Projects";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minimumFundAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minimumBudgetAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Projects__budgetAmountIsLow",
    type: "error",
  },
  {
    inputs: [],
    name: "Projects__notEnoughAmount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "author",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "projectHashId",
        type: "bytes32",
      },
    ],
    name: "ProjectAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_projectHashId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "budget",
        type: "uint256",
      },
    ],
    name: "addProject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_projectHashId",
        type: "bytes32",
      },
    ],
    name: "expireProject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_projectHashId",
        type: "bytes32",
      },
    ],
    name: "fundProject",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_authorIndex",
        type: "uint256",
      },
    ],
    name: "getAuthor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_projectHashedIdToFunders",
    outputs: [
      {
        internalType: "address",
        name: "funderAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "s_projectHashedIdToProject",
    outputs: [
      {
        internalType: "bytes32",
        name: "projectHashId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "author",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "budget",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "date",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051610a31380380610a31833981810160405281019061003291906100bb565b3373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505081608081815250508060a0818152505050506100fb565b600080fd5b6000819050919050565b61009881610085565b81146100a357600080fd5b50565b6000815190506100b58161008f565b92915050565b600080604083850312156100d2576100d1610080565b5b60006100e0858286016100a6565b92505060206100f1858286016100a6565b9150509250929050565b60805160a05160c05160601c61090461012d60003960006103f9015260006101e60152600061039c01526109046000f3fe6080604052600436106100555760003560e01c806314f67f0c1461005a578063298ed0c9146100985780634a83b226146100c15780634ef18e9f146100dd5780639e2b848814610106578063b43ced7214610143575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c91906106a5565b610183565b60405161008f929190610735565b60405180910390f35b3480156100a457600080fd5b506100bf60048036038101906100ba91906106a5565b6101e4565b005b6100db60048036038101906100d6919061075e565b61039a565b005b3480156100e957600080fd5b5061010460048036038101906100ff919061075e565b6103f7565b005b34801561011257600080fd5b5061012d6004803603810190610128919061078b565b61059c565b60405161013a91906107b8565b60405180910390f35b34801561014f57600080fd5b5061016a6004803603810190610165919061075e565b6105e4565b60405161017a94939291906107e2565b60405180910390f35b6001602052816000526040600020818154811061019f57600080fd5b9060005260206000209060020201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b7f000000000000000000000000000000000000000000000000000000000000000081101561023e576040517f64aa5a5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001428152506000808481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550813373ffffffffffffffffffffffffffffffffffffffff167f941c0ed997ad8fba9d0a05e609a968cc17a6f16adbc268558086c9463f703ed760405160405180910390a35050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103f4576040517f840f7d1d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044f57600080fd5b600060016000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561051657838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505081526020019060010190610484565b50505050905060008151905060005b81811015610596578281815181106105405761053f610827565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1683828151811061057557610574610827565b5b6020026020010151602001515050808061058e90610885565b915050610525565b50505050565b6000600282815481106105b2576105b1610827565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154905084565b600080fd5b6000819050919050565b61064c81610639565b811461065757600080fd5b50565b60008135905061066981610643565b92915050565b6000819050919050565b6106828161066f565b811461068d57600080fd5b50565b60008135905061069f81610679565b92915050565b600080604083850312156106bc576106bb610634565b5b60006106ca8582860161065a565b92505060206106db85828601610690565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610710826106e5565b9050919050565b61072081610705565b82525050565b61072f8161066f565b82525050565b600060408201905061074a6000830185610717565b6107576020830184610726565b9392505050565b60006020828403121561077457610773610634565b5b60006107828482850161065a565b91505092915050565b6000602082840312156107a1576107a0610634565b5b60006107af84828501610690565b91505092915050565b60006020820190506107cd6000830184610717565b92915050565b6107dc81610639565b82525050565b60006080820190506107f760008301876107d3565b6108046020830186610717565b6108116040830185610726565b61081e6060830184610726565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108908261066f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156108c3576108c2610856565b5b60018201905091905056fea264697066735822122081d954a364928a7890829f2333d92b32080299219e2e30ec6cba96cae21cb95164736f6c63430008080033";

type ProjectsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProjectsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Projects__factory extends ContractFactory {
  constructor(...args: ProjectsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _minimumFundAmount: PromiseOrValue<BigNumberish>,
    _minimumBudgetAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Projects> {
    return super.deploy(
      _minimumFundAmount,
      _minimumBudgetAmount,
      overrides || {}
    ) as Promise<Projects>;
  }
  override getDeployTransaction(
    _minimumFundAmount: PromiseOrValue<BigNumberish>,
    _minimumBudgetAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _minimumFundAmount,
      _minimumBudgetAmount,
      overrides || {}
    );
  }
  override attach(address: string): Projects {
    return super.attach(address) as Projects;
  }
  override connect(signer: Signer): Projects__factory {
    return super.connect(signer) as Projects__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProjectsInterface {
    return new utils.Interface(_abi) as ProjectsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Projects {
    return new Contract(address, _abi, signerOrProvider) as Projects;
  }
}
